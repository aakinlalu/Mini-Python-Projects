
# Climate data analysis (part I)
# ==============================
# 
# We want to analyze some world wide climate data from the [National Climatic Data Center](http://www.ncdc.noaa.gov/data-access), 
#since they archived the world's largest climate data around the world with historical data dating back many centuries. To evaluate if their datasets will be 
#relevant for our analysis, we can download their list of countries. The file has been downloaded for you and is available as part of this exercise (the file is called 
#"NCDC_country_list.txt") and each line contains the country name one can download data for. We would like to analyze it using list, sets, and dictionary comprehensions. 
#In a subsequent exercise, we will use the original complete data file which provides not only the country name but its code to allow collecting and analyzing the data corresponding to it.
# 
# We load the data for you into a large string containing all the countries:


countries = open("NCDC_country_list.txt", "r").read()

# Let's normalize the content
countries = countries.lower()
print countries


# Question 1
# ----------
# 
# We would like to list all the countries in this list that start with the letter "b" because we are interested in datasets for Brazil. This can be done with a `for` loop as follows:
# 
#     country_list = countries.split("\n")
#     b_countries = []
#     for country in coutry_list:
#         if country[0] == "b":
#             b_countries.append(country)
# 
# Re-write this to use a list comprehension instead.


# your code goes here

b_countries = [country for country in countries.split("\n") if country[0] == 'b']

print "Countries that start with 'b':"
print b_countries


# Question 2
# ----------
# 
# Several countries are repeated in the result generated by the list comprehension. This is because there are multiple codes used by NCDC for a given country when it is particularly large. Cast your list to another Python standard datastructure that will enforce uniqueness.

print list(set(b_countries))
 



# Question 3
# ----------
# 
# If we are always going to collect all the country names and then remove duplicates, we could build a set directly rather than going through a list. Use a set comprehension (or a generator expression if you are using an older version of Python) to produce the set of names that start with "b".


unique_b_countries = { country for country in countries.split("\n") if country[0] == 'b'}





print "unique countries starting with 'b':"
#print unique_b_countries


# Question 4
# ----------
# 
# Use a dictionary comprehension (or generator expression) to produce a dictionary whose keys are *all* the countries and whose values are the number of times they appear in the data file because they have been sub-divided. Print the content of the dictionary in a nice way, one country per line.


# your code goes here
country_frequencies = {country: countries.split('\n').count(country)  for country in set(countries.split("\n"))}




print "Number of times countries have been sub-divided:"
for key, value in country_frequencies.items():
   print "{key} : {value}".format(key=key, value=value) 

